using PTIC.Sale.Entities;
using PTIC.Common.DA;
using PTIC.Sale.DA;
using System.Data;
using PTIC.Common.BL;
using Microsoft.Practices.EnterpriseLibrary.Validation;
using Microsoft.Practices.EnterpriseLibrary.Common.Configuration;
using System;

namespace PTIC.Sale.BL
{
    public class PaymentBL : BaseBusinessLogic
    {
        /// <summary>
        /// Field validation factory
        /// </summary>
        private ValidatorFactory _validatorFactory = EnterpriseLibraryContainer.Current.GetInstance<ValidatorFactory>();

        BaseDAO b = new BaseDAO();
        PaymentDA da = new PaymentDA();

        public int? Add(Payment vo)
        {
            try
            {
                if (vo == null)
                {
                    base.ValidationResults.AddResult(
                    new ValidationResult("Null payment!",
                        null, "NullPayment", null, null));
                    return null;
                }

                /*** Validataion ***/
                if (!Enum.IsDefined(typeof(PTIC.Common.Enum.PayType), vo.PayType))
                {
                    base.ValidationResults.AddResult(
                    new ValidationResult(ErrorMessages.Payment_PayType_Require,
                        null, "Payment_PayType_Require", null, null));
                    return null;
                }

                if (!Enum.IsDefined(typeof(PTIC.Common.Enum.CashReceiptType), vo.CashReceiptType))
                {
                    base.ValidationResults.AddResult(
                    new ValidationResult(ErrorMessages.Payment_CashReceiptType_Require,
                        null, "Payment_CashReceiptType_Require", null, null));
                    return null;
                }

                Validator<Payment> paymentValidator = _validatorFactory.CreateValidator<Payment>();
                ValidationResults vInvResults = paymentValidator.Validate(vo);
                base.ValidationResults = vInvResults;
                if (!vInvResults.IsValid)
                    return null;

                // If any payment have not existed yet, force to select installment type = "First" or "Final"
                if(
                    //vo.PayType != Common.Enum.PayType.First &&
                    vo.PayType == Common.Enum.PayType.Partial &&
                    !PaymentDA.Exists(vo.InvoiceID.Value, (int)PTIC.Common.Enum.PayType.First))
                {
                    base.ValidationResults.AddResult(
                    new ValidationResult(ErrorMessages.Payment_PayType_Select_FirstOrFinal,
                        null, "Payment_PayType_Select_FirstOrFinal", null, null));
                    return null;
                }
                // After installment type = "First", force to select installment type = "Partial" or "Final"
                else if(
                    vo.PayType == Common.Enum.PayType.First &&
                    PaymentDA.Exists(vo.InvoiceID.Value, (int)PTIC.Common.Enum.PayType.First))
                {
                    base.ValidationResults.AddResult(
                    new ValidationResult(ErrorMessages.Payment_PayType_Select_PartialOrFinal,
                        null, "Payment_PayType_Select_PartialOrFinal", null, null));
                    return null;
                }
                // After installment type = "Final", pay amount must be less or equal to credit amount
                else if(
                    vo.PayType == Common.Enum.PayType.Final &&
                    !PaymentDA.IsLessThanOrEqualCreditAmount(vo.InvoiceID.Value, vo.PaidAmt)
                    )
                {
                    base.ValidationResults.AddResult(
                        new ValidationResult(ErrorMessages.Payment_PaidAmt_MustLessThanOrEqualCreditAmt,
                        null, "Payment_PaidAmt_MustLessThanOrEqualCreditAmt", null, null));
                    return null;
                }
                // If installment type = "First" or "Partial", force to enter pay amount that is less than credit amount
                if (vo.PayType != Common.Enum.PayType.Final)
                {
                    if (!PaymentDA.IsLessThanCreditAmount(vo.InvoiceID.Value, vo.PaidAmt))
                    {
                        base.ValidationResults.AddResult(
                        new ValidationResult(ErrorMessages.Payment_PaidAmt_MustLessThanCreditAmt,
                        null, "Payment_PaidAmt_MustLessThanCreditAmt", null, null));
                        return null;
                    }
                }
                // If receipt length is 0, set null and its value will be generated by db
                if (vo.ReceiptNo != null)
                {
                    vo.ReceiptNo = vo.ReceiptNo.Trim();
                    if (vo.ReceiptNo.Length == 0)
                        vo.ReceiptNo = null;
                }
                // Save into db
                return PaymentDA.Insert(vo);
            }
            catch(Exception e)
            {
                base.ValidationResults.AddResult(
                    new ValidationResult(e.Message,
                        null, "PaymentBL", null, null));
                return null;
            }            
        }

        public decimal GetTotalPastPayment(int invoiceID)
        {
            return PaymentDA.SelectTotalPastPayment(invoiceID);
        }

        public DataTable GetAllReceipt(int? InvoiceID)
        {
            return PaymentDA.SelectAllReceipt(InvoiceID);
        }

        public DataTable GetAllReceiptByReceiptNo(string ReceiptNo)
        {
            return PaymentDA.SelectAllReceiptNo(ReceiptNo);
        }

        public DataTable GetBy(DateTime? startDate, DateTime? endDate, int? customerID, int? departmentID)
        {
            return PaymentDA.SelectBy(startDate, endDate, customerID, departmentID);
        }

        public DataTable GetDebtorsList(int CustomerID)
        {
            return PaymentDA.SelectDebtorsListByQuery(CustomerID);
        }

        //Select Product List From SalesDetail
        public DataTable GetSalesDetail()
        {
            return PaymentDA.SelectProductFromSaleDetails();
        }

        public DataTable GetSalesReturn(int InvoiceID,int ProductID)
        {
            return PaymentDA.SelectSaleReturnByInvoiceID(InvoiceID,ProductID);
        }


    }
}
